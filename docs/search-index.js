var searchIndex = new Map(JSON.parse('[\
["chuffed_rs",{"doc":"","t":"CCFHHHFFFHISSSSFFFHFHHHIIHHFSSHFHHHHHHHHHHHFISSSSSFFFUFFFISSSSSSSSFISSSSSSSSSSSSSSSSISSSSSFFOOOOOOOOOOOHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHONNOONNNHNONNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNHNOOONHNNNNNNNNNNNNNNNNNNNNNNONHOOOONNNNNHHHHOHHHNNOOOOOOOOOONNNNNNNNNOOONHNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOHFOONOHHHHHHH","n":["bindings","wrappers","BoolView","BoolView_attach","BoolView_detach","BoolView_getScore","Branching","Branching__bindgen_vtable","Clause","Clause_debug","ConLevel","ConLevel_CL_BND","ConLevel_CL_DEF","ConLevel_CL_DOM","ConLevel_CL_VAL","DecInfo","DummyProblem","IntVar","IntVar_IntVar","IntVar_PropInfo","IntVar_allowSet","IntVar_attach","IntVar_branch","IntVar_const_iterator","IntVar_const_reverse_iterator","IntVar_getScore","IntVar_initVals","IntVar_iterator","IntVar_max_limit","IntVar_min_limit","IntVar_remVal","IntVar_reverse_iterator","IntVar_setMax","IntVar_setMin","IntVar_setVal","IntVar_simplifyWatches","IntVar_specialiseToEL","IntVar_specialiseToLL","IntVar_specialiseToSL","IntVar_updateFixed","IntVar_updateMax","IntVar_updateMin","IntVar_wakePropagators","Lit","PreferredVal","PreferredVal_PV_MAX","PreferredVal_PV_MEDIAN","PreferredVal_PV_MIN","PreferredVal_PV_SPLIT_MAX","PreferredVal_PV_SPLIT_MIN","Propagator","Propagator__bindgen_vtable","Reason","Reason__bindgen_ty_1","Reason__bindgen_ty_1__bindgen_ty_1","Tchar","Tint","ValBranch","ValBranch_VAL_DEFAULT","ValBranch_VAL_MAX","ValBranch_VAL_MEDIAN","ValBranch_VAL_MIDDLE","ValBranch_VAL_MIN","ValBranch_VAL_RANDOM","ValBranch_VAL_SPLIT_MAX","ValBranch_VAL_SPLIT_MIN","Var","VarBranch","VarBranch_VAR_ACTIVITY","VarBranch_VAR_DEFAULT","VarBranch_VAR_DEGREE_MAX","VarBranch_VAR_DEGREE_MIN","VarBranch_VAR_INORDER","VarBranch_VAR_MAX_MAX","VarBranch_VAR_MAX_MIN","VarBranch_VAR_MIN_MAX","VarBranch_VAR_MIN_MIN","VarBranch_VAR_PSEUDO_COST","VarBranch_VAR_RANDOM","VarBranch_VAR_REDUCED_COST","VarBranch_VAR_REGRET_MAX_MAX","VarBranch_VAR_REGRET_MIN_MAX","VarBranch_VAR_SIZE_MAX","VarBranch_VAR_SIZE_MIN","VarType","VarType_BOOL_VAR","VarType_INT_VAR","VarType_INT_VAR_EL","VarType_INT_VAR_LL","VarType_INT_VAR_SL","__BindgenBitfieldUnit","__IncompleteArrayField","__bindgen_anon_1","_base","_base","_base","_bitfield_1","_bitfield_1","_bitfield_align_1","_bitfield_align_1","_phantom_0","a","activity","all_different","all_in_scip","as_mut_ptr","as_mut_slice","as_ptr","as_slice","attach","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch_IntVar","callback","cap","changes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","createVar","createVars","createVars1","createVars2","createVars3","d","d1","d2","data","data","debug","default","default","destroy_vec_intvar","detach","eflags","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_bit","get_idx","hash","in_queue","in_queue","in_scip","initVals","int_plus","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","last_solution_value","learnt","make_vec_intvar","max","max0","min","min0","new","new","new","new_bitfield_1","new_bitfield_1","new_dummy_problem","new_xyz_problem","output_vars","output_vars1","p","p_addVars","p_print","p_setcallback","padding","partial_cmp","pinfo","pos","preferred_val","priority","prop_id","pt","s","satisfied","sbps_value_selection","searchVars","set","set_bit","set_d1","set_d2","set_learnt","set_padding","set_sz","set_temp_expl","set_type","shadow_val","should_be_decidable","should_be_learnable","simplifyWatches","solve_xyz","specialiseToEL","specialiseToLL","specialiseToSL","sz","sz","temp_expl","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","updateFixed","updateMax","updateMin","v","v","v","val","val","val","vals","var","var","var","var_id","var_sym_break","vec","vtable_","vtable_","wakePropagators","x","all_different_wrapper","branch_wrapper","create_var","create_vars","int_plus_wrapper","output_vars_wrapper","var_sym_break_wrapper"],"q":[[0,"chuffed_rs"],[2,"chuffed_rs::bindings"],[429,"chuffed_rs::wrappers"],[436,"std::os::raw"],[437,"core::clone"],[438,"core::cmp"],[439,"core::cmp"],[440,"core::cmp"],[441,"core::fmt"],[442,"core::convert"],[443,"core::hash"],[444,"core::cmp"],[445,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,33,4,34,25,17,25,17,32,16,34,0,34,1,1,1,1,4,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,0,0,21,32,34,8,10,11,12,13,14,15,16,17,18,19,20,21,8,10,11,12,13,14,15,16,17,18,19,20,21,8,0,0,0,0,0,16,17,17,32,25,25,8,1,0,4,18,8,8,1,32,10,11,12,13,14,25,17,5,33,4,34,18,19,20,21,52,20,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,8,8,0,8,5,34,34,34,0,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,25,0,34,34,34,34,8,1,34,25,17,0,0,0,0,18,0,0,0,25,8,34,18,34,5,5,16,4,5,34,21,8,8,17,17,25,25,25,25,17,34,34,34,34,0,34,34,34,25,32,25,8,10,11,12,13,14,15,16,17,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,17,12,50,51,8,1,32,10,11,12,13,14,25,15,16,17,5,33,4,34,18,19,20,21,34,34,34,10,11,4,53,12,19,34,53,12,19,34,0,0,13,5,34,14,0,0,0,0,0,0,0],"f":"`````````````````````````````````````````````````````````````````````````````````````````````````````````{{{b{c}}}{}{}}{{{b{c}}d}{{f{c}}}{}}10{{hjll}n}{ce{}{}}0000000000000000000000000000000000000000000`````{{{A`{c}}}{{A`{c}}}Ab}{AdAd}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{BhBh}{BjBj}{{ce}n{}{}}000000000000{{{A`{c}}{A`{c}}}BlBn}``````{BbC`}0``{Cbn}{{}{{A`{c}}}Cd}{{}{{b{c}}}Cd}`{{hjll}n}`{{{A`{c}}{A`{c}}}CfCh}{{{A`{c}}Cj}ClCn}{{{b{c}}Cj}Cl{}}{{{D`{c}}Cj}ClCn}{{AdCj}Cl}{{AfCj}Cl}{{AhCj}Cl}{{AjCj}Cl}{{AlCj}Cl}{{CbCj}Cl}{{BbCj}Cl}{{jCj}Cl}{{DbCj}Cl}{{hCj}Cl}{{DdCj}Cl}{{BdCj}Cl}{{BfCj}Cl}{{BhCj}Cl}{{BjCj}Cl}``{cc{}}000000000000000000000{{{A`{c}}dDf}Dh{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}d}Cf{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}`{{{A`{c}}e}nDnE`}```{{DdCf}n}`{ce{}{}}000000000000000000000`{CbC`}`````{c{{A`{c}}}{}}{{}{{b{c}}}{}}{{ll}Dd}{{C`C`C`C`}{{A`{{Eb{Df}}}}}}{{C`C`C`}{{A`{{Eb{Df}}}}}}````````5{{{A`{c}}{A`{c}}}{{Ed{Bl}}}Ef}``````````{{{A`{c}}dDfDh}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{{A`{c}}dCf}n{{Dj{{f{Df}}}}{Dl{{f{Df}}}}}}{{BbC`}n}0{{CbC`}n}0001```{Ddl}`{Ddn}0{{DdD`}n}=`=>>>>>>>>>>>>>{c{{Eh{e}}}{}{}}0000000000000000000000000000000000000000000{BbC`}`{cEj{}}000000000000000000000444```````````````4`{{D`El}n}{{D`EnF`}n}{{FbFbCf}Dd}{{FbFbFbCf}D`}{{DdDdDd}n}{D`n}0","c":[],"p":[[5,"__IncompleteArrayField",2],[1,"usize"],[1,"slice"],[5,"BoolView",2],[5,"Propagator",2],[8,"c_int",436],[1,"unit"],[5,"__BindgenBitfieldUnit",2],[10,"Clone",437],[5,"Tchar",2],[5,"Tint",2],[5,"DecInfo",2],[5,"Branching",2],[5,"Lit",2],[5,"Reason",2],[20,"Reason__bindgen_ty_1",2],[5,"Reason__bindgen_ty_1__bindgen_ty_1",2],[5,"IntVar_PropInfo",2],[5,"IntVar_iterator",2],[5,"IntVar_reverse_iterator",2],[5,"DummyProblem",2],[6,"Ordering",438],[10,"Ord",438],[8,"c_uint",436],[5,"Clause",2],[10,"Default",439],[1,"bool"],[10,"PartialEq",438],[5,"Formatter",440],[8,"Result",440],[10,"Debug",440],[5,"vec",2],[5,"Var",2],[5,"IntVar",2],[1,"u8"],[1,"u64"],[10,"AsRef",441],[10,"AsMut",441],[10,"Hash",442],[10,"Hasher",442],[1,"array"],[6,"Option",443],[10,"PartialOrd",438],[6,"Result",444],[5,"TypeId",445],[8,"ConLevel",2],[8,"VarBranch",2],[8,"ValBranch",2],[1,"i32"],[5,"Branching__bindgen_vtable",2],[5,"Propagator__bindgen_vtable",2],[8,"IntVar_const_reverse_iterator",2],[8,"IntVar_const_iterator",2]],"b":[]}],\
["conjure_core",{"doc":"","t":"ECCCCPPPPPGPFGPGPPPPPPPPPFGPPPPGPPPPPPIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOFNNNNNNONNNNNNNNNNNNGIPPPFFPONNNNNNNNNNNNNNNNNNNNNNNNNONNOONOONNNNNNNNNNNNNNNPPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Solver","ast","metadata","rule","solvers","AllDiff","And","Bool","BoolDomain","Bounded","Constant","Constant","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","Int","IntDomain","Leq","Lt","MachineName","Min","Model","Name","Neq","Not","Nothing","Or","Range","Reference","Single","Sum","SumEq","SumGeq","SumLeq","SymbolTable","UserName","add_constraint","add_constraints","add_variable","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","gensym","get_constraints_vec","get_domain","hash","into","into","into","into","into","into","into","is_all_diff","is_and","is_constant","is_eq","is_geq","is_gt","is_ineq","is_leq","is_lt","is_min","is_neq","is_not","is_nothing","is_or","is_reference","is_sum","is_sum_eq","is_sum_geq","is_sum_leq","max_i32","min_i32","min_max_i32","new","new","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_constraints","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniplate","update_domain","variables","Metadata","borrow","borrow_mut","clone","clone_into","default","deserialize","dirtyclean","eq","fmt","fmt","from","into","new","serialize","to_owned","to_string","try_from","try_into","type_id","ApplicationError","ApplicationResult","BoundError","Err","Ok","Reduction","Rule","RuleNotApplicable","application","apply","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","into","into","into","name","new","new","new_expression","new_top","pure","rule_sets","symbols","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_symbols","with_top","KissSAT","Minion","Solver","SolverIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","from","from","from_str","into","into","into_iter","iter","len","next","next_back","nth","size_hint","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"conjure_core"],[5,"conjure_core::ast"],[187,"conjure_core::metadata"],[207,"conjure_core::rule"],[264,"conjure_core::solvers"],[298,"alloc::vec"],[299,"core::option"],[300,"core::clone"],[301,"core::cmp"],[302,"core::result"],[303,"serde::de"],[304,"serde::de"],[305,"core::fmt"],[306,"serde::ser"],[307,"serde::ser"],[308,"core::any"],[309,"core::ops::function"],[310,"alloc::boxed"],[311,"core::fmt"]],"d":["","","","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> JsonInput, SAT.","","","","","<strong>Supported by:</strong> Minion, JsonInput.","","","<strong>Supported by:</strong> JsonInput.","Compatability","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> Minion.","","","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput.","","<strong>Supported by:</strong> JsonInput.","","","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput, SAT.","Represents an empty expressionNB: we only expect this at …","<strong>Supported by:</strong> JsonInput, SAT.","","<strong>Supported by:</strong> Minion, JsonInput, SAT.","","<strong>Supported by:</strong> Minion, JsonInput.","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an arbitrary variable name that is not in the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this <code>Expression</code> a <code>AllDiff</code>?","Is this <code>Expression</code> a <code>And</code>?","Is this <code>Expression</code> a <code>Constant</code>?","Is this <code>Expression</code> a <code>Eq</code>?","Is this <code>Expression</code> a <code>Geq</code>?","Is this <code>Expression</code> a <code>Gt</code>?","Is this <code>Expression</code> a <code>Ineq</code>?","Is this <code>Expression</code> a <code>Leq</code>?","Is this <code>Expression</code> a <code>Lt</code>?","Is this <code>Expression</code> a <code>Min</code>?","Is this <code>Expression</code> a <code>Neq</code>?","Is this <code>Expression</code> a <code>Not</code>?","Is this <code>Expression</code> a <code>Nothing</code>?","Is this <code>Expression</code> a <code>Or</code>?","Is this <code>Expression</code> a <code>Reference</code>?","Is this <code>Expression</code> a <code>Sum</code>?","Is this <code>Expression</code> a <code>SumEq</code>?","Is this <code>Expression</code> a <code>SumGeq</code>?","Is this <code>Expression</code> a <code>SumLeq</code>?","Returns the maximum i32 value a variable of the domain can …","Returns the minimum i32 value a variable of the domain can …","Returns the minimum and maximum integer values a variable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","The result of applying a rule to an expression. Contains …","","Contains the error value","Contains the success value","The result of applying a rule to an expression.","A rule with a name, application function, and rule sets.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Represents a reduction with no side effects on the model.","","","","","","","","","","","","","","","","Represents a reduction that also modifies the symbol table.","Represents a reduction that also adds a top-level …","","","All supported solvers.","An iterator over the variants of Solver","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,2,2,14,11,12,0,2,0,0,2,0,2,2,2,14,11,2,2,5,2,0,0,2,2,2,2,0,2,12,2,2,2,2,0,5,1,1,1,1,5,6,11,12,14,2,1,5,6,11,12,14,2,2,1,5,6,11,12,14,2,1,5,6,11,12,14,2,5,1,1,1,5,6,11,12,14,2,6,1,5,6,11,12,14,2,1,5,5,6,6,11,12,14,14,2,2,1,5,6,11,12,14,2,1,1,1,5,1,5,6,11,12,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,1,6,5,1,5,6,11,12,14,2,1,1,5,6,11,12,14,2,5,6,14,2,1,5,6,11,12,14,2,1,5,6,11,12,14,2,1,5,6,11,12,14,2,2,1,1,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,35,34,34,0,0,35,33,32,33,35,32,33,35,32,33,32,33,32,33,33,35,35,32,33,33,35,32,33,33,35,32,33,33,32,33,32,32,32,33,32,32,33,35,33,35,32,33,35,32,33,35,32,33,32,32,40,40,0,0,40,39,40,39,39,39,40,40,39,40,39,40,40,39,39,40,39,39,39,39,39,39,40,40,40,39,40,39,40,39],"f":"````````````````````````````````````````{{bd}f}{{b{h{d}}}f}{{bjl}f}{ce{}{}}0000000000000{{dn}{{Ad{{Ab{A`A`}}}}}}{bb}{jj}{ll}{AfAf}{{{Ah{c}}}{{Ah{c}}}Aj}{AlAl}{dd}{{ce}f{}{}}000000{{jj}An}`{{}b}{c{{B`{b}}}Bb}{c{{B`{j}}}Bb}{c{{B`{l}}}Bb}{c{{B`{Af}}}Bb}{c{{B`{{Ah{e}}}}}BbBd}{c{{B`{Al}}}Bb}{c{{B`{d}}}Bb}`{{bb}Bf}{{jj}Bf}{{ll}Bf}{{AfAf}Bf}{{{Ah{c}}{Ah{c}}}BfBh}{{AlAl}Bf}{{dd}Bf}{{bBj}Bl}{{jBj}Bl}0{{lBj}Bl}0{{AfBj}Bl}{{{Ah{c}}Bj}BlBn}{{AlBj}Bl}0{{dBj}Bl}0{cc{}}000000{bj}{b{{h{d}}}}{{bj}{{Ad{Af}}}}{{jc}fC`}{ce{}{}}000000{dBf}000000000000000000{Af{{Ad{A`}}}}0{Af{{Ad{{Ab{A`A`}}}}}}{{nd}b}{Afl}{{jj}{{Ad{An}}}}{{bc}B`Cb}{{jc}B`Cb}{{lc}B`Cb}{{Afc}B`Cb}{{{Ah{c}}e}B`CdCb}{{Alc}B`Cb}{{dc}B`Cb}{{b{h{d}}}f}>>>>>>>{cCf{}}000{c{{B`{e}}}{}{}}0000000000000{cCh{}}000000{d{{Ab{{h{d}}{Cl{Cj}}}}}}{{bjAf}f}``{ce{}{}}0{CnCn}{{ce}f{}{}}{{}Cn}{c{{B`{Cn}}}Bb}`{{CnCn}Bf}{{CnBj}Bl}0{cc{}}74{{Cnc}B`Cb}8=<<;`````````{{D`b}f}{{Dbdb}Dd}::::::{D`D`}{DbDb}::{{DbDb}Bf}{{DfBj}Bl}0{{D`Bj}Bl}{{DbBj}Bl}0999{{Dbc}fC`}{ce{}{}}00`{{ddn}D`}{{Dh{Dl{{Ab{DhDj}}}}}Db}``{dD`}``33{cCf{}}0{c{{B`{e}}}{}{}}00000{cCh{}}00{{dn}D`}{{dd}D`}````8888{DnDn}{{ce}f{}{}}{{E`Bj}Bl}{{E`Bj}{{B`{fEb}}}}{{DnBj}Bl}{cc{}}0{Dh{{B`{E`c}}}{}}???{{}Dn}{DnEd}{Dn{{Ad{c}}}{}}0{{DnEd}{{Ad{c}}}{}}{Dn{{Ab{Ed{Ad{Ed}}}}}}{ce{}{}}{cCf{}}7{c{{B`{e}}}{}{}}000{cCh{}}0","c":[],"p":[[5,"Model",5],[6,"Expression",5],[1,"unit"],[5,"Vec",298],[6,"Name",5],[5,"DecisionVariable",5],[8,"SymbolTable",5],[1,"i32"],[1,"tuple"],[6,"Option",299],[6,"Domain",5],[6,"Range",5],[10,"Clone",300],[6,"Constant",5],[6,"Ordering",301],[6,"Result",302],[10,"Deserializer",303],[10,"Deserialize",303],[1,"bool"],[10,"PartialEq",301],[5,"Formatter",304],[8,"Result",304],[10,"Debug",304],[10,"Hasher",305],[10,"Serializer",306],[10,"Serialize",306],[5,"String",307],[5,"TypeId",308],[10,"Fn",309],[5,"Box",310],[5,"Metadata",187],[5,"Reduction",207],[5,"Rule",207],[8,"ApplicationResult",207],[6,"ApplicationError",207],[1,"str"],[1,"u8"],[1,"slice"],[5,"SolverIter",264],[6,"Solver",264],[5,"Error",304],[1,"usize"]],"b":[[91,"impl-Display-for-Name"],[92,"impl-Debug-for-Name"],[93,"impl-Display-for-DecisionVariable"],[94,"impl-Debug-for-DecisionVariable"],[97,"impl-Display-for-Constant"],[98,"impl-Debug-for-Constant"],[99,"impl-Display-for-Expression"],[100,"impl-Debug-for-Expression"],[196,"impl-Display-for-Metadata"],[197,"impl-Debug-for-Metadata"],[229,"impl-Display-for-ApplicationError"],[230,"impl-Debug-for-ApplicationError"],[232,"impl-Display-for-Rule%3C\'a%3E"],[233,"impl-Debug-for-Rule%3C\'a%3E"],[274,"impl-Debug-for-Solver"],[275,"impl-Display-for-Solver"]]}],\
["conjure_oxide",{"doc":"","t":"EPPFGNNNCNNNNNNONNNCECNNNNNNCNNNNNNNCCCNNCNNNNNNNNNCNCOPPPPPGPFGPGPPPPPPPPPFGPPPPGPPPPPPIPNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOPGPPPPPINNNNNNNNNNNNNHHHHCCGPNNNNNHHNHHNNNNPGNNNNNNNHNNNNHKPFPPGNNONNNNMNCCNNNNNOGPPPPPNNNNNNNNNNFNNNNONNNNNNONNNNNCPPPRPPPRPPPPPGGGRFFKIGIPPCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNCMNMNMNCCNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNPPKGFPPNNNNNNNNNNNNNNNNFFFFKOONNNNNNNNNNNNNNNNOONNNNNNNNNNNNOOFKNNNNNNNCCCCPGPNNNNNNHNHHNNNNHHHHHHHHHH","n":["Error","KissSAT","Minion","Model","Solver","add_constraint","add_constraints","add_variable","ast","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","constraints","default","deserialize","eq","error","eval_constant","find_conjure","fmt","fmt","fmt","from","from","from_str","generate_custom","gensym","get_constraints_vec","get_domain","into","into","iter","new","parse","rule_engine","rules","serialize","set_constraints","solvers","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unstable","update_domain","utils","variables","AllDiff","And","Bool","BoolDomain","Bounded","Constant","Constant","DecisionVariable","Domain","Eq","Expression","Geq","Gt","Ineq","Int","IntDomain","Leq","Lt","MachineName","Min","Model","Name","Neq","Not","Nothing","Or","Range","Reference","Single","Sum","SumEq","SumGeq","SumLeq","SymbolTable","UserName","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","constraints","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","is_all_diff","is_and","is_constant","is_eq","is_geq","is_gt","is_ineq","is_leq","is_lt","is_min","is_neq","is_not","is_nothing","is_or","is_reference","is_sum","is_sum_eq","is_sum_geq","is_sum_leq","max_i32","min_i32","min_max_i32","new","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uniplate","variables","Err","Error","JSON","NotImplemented","Ok","Other","Parse","Result","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","conjure_executable","get_example_model","get_example_model_by_path","model_from_json","resolve_rules","rewrite","ResolveRulesError","RuleSetNotFound","borrow","borrow_mut","fmt","fmt","from","get_rule_priorities","get_rules_vec","into","resolve_rule_sets","rule_cmp","to_string","try_from","try_into","type_id","ResolveRulesError","RewriteError","borrow","borrow_mut","fmt","fmt","from","from","into","rewrite_model","to_string","try_from","try_into","type_id","eval_constant","FromConjureModel","InvalidInstance","Model","NotSupported","Other","SolverError","borrow","borrow_mut","constraints","fmt","fmt","from","from","from_conjure","into","kissat","minion","source","to_string","try_from","try_into","type_id","variables","CNFError","ClauseIndexNotFound","NestedAnd","UnexpectedExpression","UnexpectedExpressionInsideNot","VariableNameNotFound","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","MinionModel","borrow","borrow_mut","clone","clone_into","constraints","default","eq","fmt","from","from_conjure","into","named_variables","new","to_owned","try_from","try_into","type_id","solver_interface","Complete","HasSolutions","Incomplete","Model","ModelFeatureNotImplemented","ModelFeatureNotSupported","ModelInvalid","Modifier","NoSolutions","OpNotImplemented","OpNotSupported","Runtime","RuntimeNotImplemented","SearchComplete","SearchIncomplete","SearchStatus","Solution","SolveSuccess","Solver","SolverAdaptor","SolverCallback","SolverError","SolverMutCallback","Timeout","UserTerminated","adaptors","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","from","from","from","init_solver","into","into","into","into","into","into","load_model","load_model","model_modifier","new","new","solve","solve","solve_mut","solve_mut","states","stats","stats","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wall_time_s","Minion","borrow","borrow_mut","from","into","load_model","new","solve","solve_mut","try_from","try_into","type_id","ArgsInvalid","Error","ModelModifier","ModificationFailure","NotModifiable","OpNotImplemented","OpNotSupported","add_constraint","add_variable","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","ExecutionFailure","ExecutionSuccess","Init","ModelLoaded","SolverState","_sealed","_sealed","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","stats","status","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wall_time_s","why","NoStats","Stats","borrow","borrow_mut","from","into","try_from","try_into","type_id","conjure","json","misc","testing","ConjurePrettyError","EssenceParseError","ParseError","borrow","borrow_mut","fmt","fmt","from","from","get_minion_solutions","into","minion_solutions_to_json","parse_essence_file","to_string","try_from","try_into","type_id","sort_json_object","sort_json_variables","to_set","assert_eq_any_order","minion_solutions_from_json","read_minion_solutions_json","read_model_json","save_minion_solutions_json","save_model_json","serialise_model"],"q":[[0,"conjure_oxide"],[55,"conjure_oxide::ast"],[213,"conjure_oxide::error"],[234,"conjure_oxide::find_conjure"],[235,"conjure_oxide::generate_custom"],[237,"conjure_oxide::parse"],[238,"conjure_oxide::rule_engine"],[240,"conjure_oxide::rule_engine::resolve_rules"],[256,"conjure_oxide::rule_engine::rewrite"],[270,"conjure_oxide::rules"],[271,"conjure_oxide::solvers"],[294,"conjure_oxide::solvers::kissat"],[310,"conjure_oxide::solvers::minion"],[328,"conjure_oxide::unstable"],[329,"conjure_oxide::unstable::solver_interface"],[420,"conjure_oxide::unstable::solver_interface::adaptors"],[432,"conjure_oxide::unstable::solver_interface::model_modifier"],[455,"conjure_oxide::unstable::solver_interface::states"],[494,"conjure_oxide::unstable::solver_interface::stats"],[503,"conjure_oxide::utils"],[507,"conjure_oxide::utils::conjure"],[524,"conjure_oxide::utils::json"],[526,"conjure_oxide::utils::misc"],[527,"conjure_oxide::utils::testing"],[534,"alloc::vec"],[535,"core::result"],[536,"serde::de"],[537,"core::fmt"],[538,"core::fmt"],[539,"conjure_core::solvers"],[540,"std::collections::hash::map"],[541,"serde::ser"],[542,"alloc::string"],[543,"core::any"],[544,"core::clone"],[545,"core::cmp"],[546,"serde::de"],[547,"serde::ser"],[548,"alloc::boxed"],[549,"core::fmt"],[550,"serde_json::error"],[551,"core::error"],[552,"anyhow"],[553,"conjure_core::rule"],[554,"serde_json::value"],[555,"std::collections::hash::set"],[556,"core::cmp"]],"d":["","","","","All supported solvers.","","","","","","","","","","","","","","","Top-level error types for Conjure-Oxide.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns an arbitrary variable name that is not in the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Unstable and in-development features of Conjure-Oxide.","","","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> JsonInput, SAT.","","","","","<strong>Supported by:</strong> Minion, JsonInput.","","","<strong>Supported by:</strong> JsonInput.","Compatability","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> Minion.","","","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput.","","<strong>Supported by:</strong> JsonInput.","","","<strong>Supported by:</strong> JsonInput.","<strong>Supported by:</strong> JsonInput, SAT.","Represents an empty expressionNB: we only expect this at …","<strong>Supported by:</strong> JsonInput, SAT.","","<strong>Supported by:</strong> Minion, JsonInput, SAT.","","<strong>Supported by:</strong> Minion, JsonInput.","","<strong>Supported by:</strong> Minion.","<strong>Supported by:</strong> Minion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this <code>Expression</code> a <code>AllDiff</code>?","Is this <code>Expression</code> a <code>And</code>?","Is this <code>Expression</code> a <code>Constant</code>?","Is this <code>Expression</code> a <code>Eq</code>?","Is this <code>Expression</code> a <code>Geq</code>?","Is this <code>Expression</code> a <code>Gt</code>?","Is this <code>Expression</code> a <code>Ineq</code>?","Is this <code>Expression</code> a <code>Leq</code>?","Is this <code>Expression</code> a <code>Lt</code>?","Is this <code>Expression</code> a <code>Min</code>?","Is this <code>Expression</code> a <code>Neq</code>?","Is this <code>Expression</code> a <code>Not</code>?","Is this <code>Expression</code> a <code>Nothing</code>?","Is this <code>Expression</code> a <code>Or</code>?","Is this <code>Expression</code> a <code>Reference</code>?","Is this <code>Expression</code> a <code>Sum</code>?","Is this <code>Expression</code> a <code>SumEq</code>?","Is this <code>Expression</code> a <code>SumGeq</code>?","Is this <code>Expression</code> a <code>SumLeq</code>?","Returns the maximum i32 value a variable of the domain can …","Returns the minimum i32 value a variable of the domain can …","Returns the minimum and maximum integer values a variable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","","","","Contains the success value","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Checks if the conjure executable is present in PATH and if …","Searches recursively in <code>../tests/integration</code> folder for an …","Searches for an <code>.essence</code> file at the given filepath, then …","","","","","","","","","","Returns the argument unchanged.","Convert a list of rule sets into a final map of rules to …","Get a final ordering of rules based on their priorities …","Calls <code>U::from(self)</code>.","Helper function to resolve a list of rule set names into a …","Compare two rules by their priorities and names.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Rewrites the model by applying the rules to all …","","","","","Simplify an expression to a constant if possible Returns: …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Solver interface to minion_rs.","","","","","","","Error type for CNF adapter","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A Minion model.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates an empty Minion model.","","","","","A high-level API for interacting with constraints solvers.","The search was complete (i.e. the solver found all …","","The search was incomplete (i.e. it was terminated before …","The native model type of the underlying solver.","","","","The <code>ModelModifier</code> used during incremental search.","","","","","","","","","The native solution type of the underlying solver.","Returned from SolverAdaptor when solving is successful.","An abstract representation of a constraints solver.","A common interface for calling underlying solver APIs …","The type for user-defined callbacks for use with Solver.","Errors returned by Solver on failure.","","","","Solver adaptors.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Modifying a model during search.","","","Runs the solver on the given model.","","Runs the solver on the given model, allowing modification …","","States of a <code>Solver</code>.","Statistics about a solver run.","","","","","","","","","","","","","","","","","","","","","","","","A SolverAdaptor for interacting with Minion.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","An unspecified error has occurred.","A ModelModifier provides an interface to modify a model …","The requested modification to the model has failed.","A <code>ModelModifier</code> for a solver that does not support …","The desired operation is supported by this solver adaptor, …","The desired operation is not supported for this solver …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The state returned by <code>Solver</code> if solving has not been …","The state returned by <code>Solver</code> if solving has been …","","","","Cannot construct this from outside this module.","Cannot construct this from outside this module.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Execution statistics.","The status of the search","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Recursively sorts the keys of all JSON objects within the …","Sort the “variables” field by name. We have to do this …","","","","","","","",""],"i":[0,12,12,0,0,1,1,1,0,1,12,1,12,1,1,1,1,1,1,0,0,0,1,12,12,1,12,12,0,1,1,1,1,12,12,1,0,0,0,1,1,0,1,12,1,12,12,1,12,1,12,0,1,0,1,2,2,25,14,23,0,2,0,0,2,0,2,2,2,25,14,2,2,5,2,0,0,2,2,2,2,0,2,23,2,2,2,2,0,5,5,6,14,23,25,2,5,6,14,23,25,2,2,5,6,14,23,25,2,5,6,14,23,25,2,5,1,5,6,14,23,25,2,6,5,6,14,23,25,2,5,5,6,6,14,23,25,25,2,2,5,6,14,23,25,2,5,5,6,14,23,25,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,6,5,5,6,14,23,25,2,5,6,14,23,25,2,5,6,25,2,5,6,14,23,25,2,5,6,14,23,25,2,5,6,14,23,25,2,2,1,40,0,34,34,40,34,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,0,0,0,41,41,41,41,41,41,0,0,41,0,0,41,41,41,41,45,0,45,45,45,45,45,45,45,0,45,45,45,45,0,0,46,0,46,46,0,46,46,1,46,46,46,46,47,46,0,0,46,46,46,46,46,1,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,74,75,74,51,53,53,53,51,75,53,53,53,53,0,0,0,51,0,0,0,0,0,0,76,76,0,61,74,76,75,50,53,61,74,76,75,50,53,50,53,50,53,53,53,61,74,76,75,50,53,51,61,74,76,75,50,53,51,50,0,51,50,51,50,51,50,0,0,50,50,53,53,61,74,76,75,50,53,61,74,76,75,50,53,61,74,76,75,50,53,50,0,66,66,66,66,66,66,66,66,66,66,66,67,67,0,0,0,67,67,57,57,77,67,77,67,77,67,77,67,77,67,77,67,77,67,0,0,0,0,0,62,78,58,59,62,78,58,59,62,78,58,59,62,78,58,59,62,78,62,62,58,59,62,78,58,59,62,78,58,59,62,78,62,78,0,0,79,79,79,79,79,79,79,0,0,0,0,68,0,68,68,68,68,68,68,68,0,68,0,0,68,68,68,68,0,0,0,0,0,0,0,0,0,0],"f":"`````{{bd}f}{{b{h{d}}}f}{{bjl}f}`{ce{}{}}000{bb}{{ce}f{}{}}`{{}b}{c{{n{b}}}A`}{{bb}Ab}```{{bAd}{{n{fAf}}}}{{AhAd}{{n{fAf}}}}0{cc{}}0{Aj{{n{Ah}}}}`{bj}{b{{h{d}}}}{{bj}{{An{Al}}}}<<{{}B`}{{{Bb{jl}}d}b}```{{bc}nBd}{{b{h{d}}}f}`{ce{}{}}{cBf{}}{c{{n{e}}}{}{}}:000{cBh{}}0`{{bjAl}f}`````````````````````````````````````444444444444{{d{Bb{jl}}}{{An{{Bl{BjBj}}}}}}{jj}{ll}{AlAl}{{{Bn{c}}}{{Bn{c}}}C`}{CbCb}{dd}{{ce}f{}{}}00000{{jj}Cd}`{c{{n{j}}}A`}{c{{n{l}}}A`}{c{{n{Al}}}A`}{c{{n{{Bn{e}}}}}A`Cf}{c{{n{Cb}}}A`}{c{{n{d}}}A`}`{{jj}Ab}{{ll}Ab}{{AlAl}Ab}{{{Bn{c}}{Bn{c}}}AbCh}{{CbCb}Ab}{{dd}Ab}{{jAd}{{n{fAf}}}}0{{lAd}{{n{fAf}}}}0{{AlAd}{{n{fAf}}}}{{{Bn{c}}Ad}{{n{fAf}}}Cj}{{CbAd}{{n{fAf}}}}0{{dAd}{{n{fAf}}}}0{cc{}}00000{{jc}fCl}{ce{}{}}00000{dAb}000000000000000000{Al{{An{Bj}}}}0{Al{{An{{Bl{BjBj}}}}}}{All}{{jj}{{An{Cd}}}}{{jc}nBd}{{lc}nBd}{{Alc}nBd}{{{Bn{c}}e}nCnBd}{{Cbc}nBd}{{dc}nBd};;;;;;{cBf{}}000{c{{n{e}}}{}{}}00000000000{cBh{}}00000{d{{Bl{{h{d}}{Db{D`}}}}}}`````````??{{DdAd}Df}0{DhDd}{cc{}}{DjDd}{ce{}{}}{Dd{{An{Dl}}}}9887{{}{{Dn{f}}}}{Aj{{n{bDh}}}}0{Aj{{E`{b}}}}````44{{EbAd}Df}07{{{h{Ed}}}{{n{{Bb{EfEh}}Eb}}}}{{{Bb{EfEh}}}{{h{Ef}}}}7{{{h{Aj}}}{{n{{h{Ed}}Eb}}}}{{EfEf{Bb{EfEh}}}Cd}{cBf{}}{c{{n{e}}}{}{}}0{cBh{}}``<<{{EjAd}Df}0?{EbEj}>{{b{h{Ed}}}{{n{bEj}}}}5443{d{{An{Cb}}}}``````{ce{}{}}0`{{ElAd}Df}0{DhEl}{cc{}}{b{{n{EnEl}}}}4``{El{{An{Dl}}}}<;;:```````55{{F`Ad}Df}036=<<;`66{FbFb}{{ce}f{}{}}`{{}Fb}{{FbFb}Ab}{{FbAd}{{n{fAf}}}}8{b{{Dn{FbEl}}}}<`3<{c{{n{e}}}{}{}}0{cBh{}}```````````````````````````>>>>>>>>>>>>{{{Fd{ce}}}{{Fd{ce}}}{C`Ff}{C`Fh}}{FjFj}88{{FjAd}Df}0>>>>>>`{ce{}{}}00000`{{{Fd{cGd}}b}{{n{{Fd{cGf}}Fj}}}Ff}`{{}{{Ff{}{{Fl{c}}{Fn{e}}{G`{g}}}}}C`C`Gb}{c{{Fd{c}}}Ff}`{{{Fd{cGf}}Gh}{{n{{Fd{cGl}}Fj}}}Ff}`{{{Fd{cGf}}{Gn{c}}}{{n{{Fd{cGl}}Fj}}}Ff}``{{{Fd{cGl}}}{{An{{Db{H`}}}}}Ff}66{cBf{}}<<<<<<<<<<<<;;;;;;{{{Fd{cGl}}}HbFf}`88{cc{}}9`{{}Hd}``??>```````{d{{n{fHf}}}}{{jAl}{{n{fHf}}}}<<<<33<<{c{{n{e}}}{}{}}000{cBh{}}0```````>>>>>>>>5555>>>>``111111110000````>>5>110```````>>{{HhAd}Df}0{DdHh}7{b{{n{{h{{Bb{jCb}}}}Dh}}}}{ce{}{}}{{{h{{Bb{jCb}}}}}Hj}{{AjAj}{{n{bHh}}}}=776{{HjAb}Hj}{HjHj}{{{h{c}}}{{Hl{c}}}{HnI`CjC`}}{{{h{{h{c}}}}{h{{h{c}}}}}f{HnI`CjC`}}{Aj{{n{{h{{Bb{jCb}}}}Dh}}}}{{AjAjAj}{{n{HjDh}}}}{{AjAjAjAj}{{n{bIb}}}}{{{h{{Bb{jCb}}}}AjAjAb}{{n{HjIb}}}}{{bAjAjAjAb}{{n{fIb}}}}{b{{n{BfDj}}}}","c":[],"p":[[5,"Model",0],[6,"Expression",55],[1,"unit"],[5,"Vec",534],[6,"Name",55],[5,"DecisionVariable",55],[6,"Result",535],[10,"Deserializer",536],[1,"bool"],[5,"Formatter",537],[5,"Error",537],[6,"Solver",0],[1,"str"],[6,"Domain",55],[6,"Option",538],[5,"SolverIter",539],[5,"HashMap",540],[10,"Serializer",541],[5,"String",542],[5,"TypeId",543],[1,"i32"],[1,"tuple"],[6,"Range",55],[10,"Clone",544],[6,"Constant",55],[6,"Ordering",545],[10,"Deserialize",536],[10,"PartialEq",545],[10,"Debug",537],[10,"Hasher",546],[10,"Serialize",541],[10,"Fn",547],[5,"Box",548],[6,"Error",213],[8,"Result",537],[5,"Error",549],[5,"Error",550],[10,"Error",551],[8,"Result",549],[8,"Result",213],[6,"ResolveRulesError",240],[5,"RuleSet",552],[5,"Rule",553],[1,"u8"],[6,"RewriteError",256],[6,"SolverError",271],[10,"FromConjureModel",271],[6,"CNFError",294],[5,"MinionModel",310],[5,"Solver",329],[10,"SolverAdaptor",329],[10,"SolverState",455],[6,"SolverError",329],[17,"Model"],[17,"Solution"],[17,"Modifier"],[10,"ModelModifier",432],[5,"Init",455],[5,"ModelLoaded",455],[8,"SolverCallback",329],[5,"SolveSuccess",329],[5,"ExecutionSuccess",455],[8,"SolverMutCallback",329],[10,"Stats",494],[1,"f64"],[5,"Minion",420],[6,"ModificationFailure",432],[6,"EssenceParseError",507],[6,"Value",554],[5,"HashSet",555],[10,"Eq",545],[10,"Hash",546],[5,"Error",556],[6,"SearchStatus",329],[6,"SearchComplete",329],[6,"SearchIncomplete",329],[5,"NotModifiable",432],[5,"ExecutionFailure",455],[5,"NoStats",494]],"b":[[23,"impl-Display-for-Solver"],[24,"impl-Debug-for-Solver"],[130,"impl-Debug-for-Name"],[131,"impl-Display-for-Name"],[132,"impl-Debug-for-DecisionVariable"],[133,"impl-Display-for-DecisionVariable"],[136,"impl-Display-for-Constant"],[137,"impl-Debug-for-Constant"],[138,"impl-Display-for-Expression"],[139,"impl-Debug-for-Expression"],[223,"impl-Display-for-Error"],[224,"impl-Debug-for-Error"],[225,"impl-From%3CError%3E-for-Error"],[227,"impl-From%3CError%3E-for-Error"],[244,"impl-Display-for-ResolveRulesError"],[245,"impl-Debug-for-ResolveRulesError"],[260,"impl-Display-for-RewriteError"],[261,"impl-Debug-for-RewriteError"],[280,"impl-Debug-for-SolverError"],[281,"impl-Display-for-SolverError"],[302,"impl-Display-for-CNFError"],[303,"impl-Debug-for-CNFError"],[371,"impl-Display-for-SolverError"],[372,"impl-Debug-for-SolverError"],[512,"impl-Debug-for-EssenceParseError"],[513,"impl-Display-for-EssenceParseError"]]}],\
["conjure_rules",{"doc":"A decentralised rule registry for Conjure Oxide","t":"EHHHHXQCFNNNNONNNNNNONOONNNN","n":["RuleSet","get_rule_by_name","get_rule_set_by_name","get_rule_sets","get_rules","register_rule","register_rule_set","rule_set","RuleSet","borrow","borrow_mut","clone","clone_into","dependencies","eq","fmt","from","get_rules","hash","into","name","new","order","rules","to_owned","try_from","try_into","type_id"],"q":[[0,"conjure_rules"],[8,"conjure_rules::rule_set"],[28,"conjure_core::rule"],[29,"core::option"],[30,"alloc::vec"],[31,"core::fmt"],[32,"core::fmt"],[33,"core::hash"],[34,"core::result"],[35,"core::any"]],"d":["","Get a rule by name. Returns the rule with the given name …","Get a rule set by name. Returns the rule set with the …","Get all rule sets Returns a <code>Vec</code> of static references to …","Returns a copied <code>Vec</code> of all rules registered with the …","This procedural macro registers a decorated function with …","This procedural macro registers a rule set with the global …","","A set of rules with a name, priority, and dependencies.","","","","","The names of the rule sets that this rule set depends on.","","","Returns the argument unchanged.","Get the rules of this rule set, evaluating them lazily if …","","Calls <code>U::from(self)</code>.","The name of the rule set.","","Order of the RuleSet. Used to establish a consistent order …","A map of rules to their priorities. This will be lazily …","","","",""],"i":[0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":"`{b{{f{d}}}}{b{{f{h}}}}{{}{{j{h}}}}{{}{{j{d}}}}````{ce{}{}}0{hh}{{ce}l{}{}}`{{hh}n}{{hA`}Ab}{cc{}}{h{{Af{dAd}}}}{{hc}lAh}7`{{bAd{Aj{b}}}h}``8{c{{Al{e}}}{}{}}0{cAn{}}","c":[],"p":[[1,"str"],[5,"Rule",28],[6,"Option",29],[5,"RuleSet",8],[5,"Vec",30],[1,"unit"],[1,"bool"],[5,"Formatter",31],[8,"Result",31],[1,"u8"],[5,"HashMap",32],[10,"Hasher",33],[1,"slice"],[6,"Result",34],[5,"TypeId",35]],"b":[]}],\
["enum_compatability_macro",{"doc":"A macro to document enum variants with the things that …","t":"X","n":["document_compatibility"],"q":[[0,"enum_compatability_macro"]],"d":["A macro to document enum variants by the things that they …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["minion_rs",{"doc":"This crate provides low level Rust bindings to the Minion …","t":"ICCHPPPPPPPPGPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPFPIIGGIPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNPGPPGPPNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Callback","ast","error","run_minion","Abs","AllDiff","AllDiffMatrix","Bool","Bool","Bound","CheckAssign","CheckGsa","Constant","ConstantAsVar","Constraint","Difference","DisEq","Discrete","Div","DivUndefZero","Element","ElementOne","ElementUndefZero","Eq","ForwardChecking","FrameUpdate","GacAllDiff","GacEq","GacSchema","Gcc","GccWeak","Hamming","Ineq","Integer","LexLeq","LexLeqQuick","LexLeqRv","LexLess","LexLessQuick","LightTable","LitSumGeq","Max","Mddc","Min","MinusEq","Model","Modulo","ModuloUndefZero","NameRef","NegativeMddc","NegativeTable","NotHamming","NvalueGeq","NvalueLeq","Occurrence","OccurrenceGeq","OccurrenceLeq","Pow","Product","Reify","ReifyImply","ReifyImplyQuick","SparseBound","Str2Plus","SumGeq","SumLeq","SymbolTable","Table","Tuple","TwoVars","Var","VarDomain","VarName","WInIntervalSet","WInRange","WInset","WLiteral","WNotInRange","WNotInset","WNotLiteral","WatchElement","WatchElementOne","WatchElementOneUndefZero","WatchElementUndefZero","WatchLess","WatchNeq","WatchSumGeq","WatchSumLeq","WatchVecExistsLess","WatchVecNeq","WatchedAnd","WatchedOr","WeightedSumGeq","WeightedSumLeq","add_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constraints","contains","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_variable_order","get_vartype","into","into","into","into","into","into","named_variables","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","InvalidInstance","MinionError","NotImplemented","Other","RuntimeError","RuntimeError","UnknownError","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"minion_rs"],[4,"minion_rs::ast"],[174,"minion_rs::error"],[206,"core::result"],[207,"core::option"],[208,"core::fmt"],[209,"core::fmt"],[210,"core::any"],[211,"anyhow"],[212,"core::error"],[213,"alloc::string"]],"d":["The callback function used to capture results from Minion …","Types used for representing Minion models in Rust.","Error types.","Run Minion on the given Model.","","","","","","","","","Representation of a Minion constant.","","All supported Minion constraints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Minion model.","","","","","","","","","","","","","","","","","","","","","Stores all named variables in a Minion model alongside …","","","","Representation of a Minion Variable.","Representation of variable domains.","","","","","","","","","","","","","","","","","","","","","","","Creates a new variable and adds it to the symbol table.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the canonical ordering of variables.","Gets the domain of a named variable.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates an empty Minion model.","","","","","","","","","","","","","","","","","","","","","","","","","The model given to Minion is invalid.","Wraps all error types returned by <code>minion_rs</code>.","The input model uses Minion features that are not yet …","Catch-all error.","Errors thrown by Minion during execution.","An error has occurred during the execution of Minion.","An unknown error has occurred.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,10,10,10,12,8,8,10,10,0,11,0,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,10,10,10,10,10,10,10,10,10,10,10,0,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,0,10,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,1,10,11,12,8,6,1,10,11,12,8,6,1,10,11,12,8,6,1,10,11,12,8,6,1,6,1,1,10,11,12,8,6,1,10,11,12,8,6,1,10,11,12,8,6,6,6,1,10,11,12,8,6,1,1,1,10,11,12,8,6,1,10,11,12,8,6,1,10,11,12,8,6,1,10,11,12,8,6,18,0,4,4,0,4,18,4,18,4,18,18,4,4,18,18,4,4,4,18,18,4,18,4,4,18,4,18,4,18,4,18],"f":"```{{bd}{{j{fh}}}}``````````````````````````````````````````````````````````````````````````````````````````{{lnA`}{{Ab{f}}}}{ce{}{}}00000000000{bb}{AdAd}{AfAf}{AhAh}{A`A`}{ll}{{ce}f{}{}}00000`{{ln}Aj}{{}b}{{bb}Aj}{{AdAd}Aj}{{AfAf}Aj}{{AhAh}Aj}{{A`A`}Aj}{{ll}Aj}{{bAl}An}{{AdAl}An}{{AfAl}An}{{AhAl}An}{{A`Al}An}{{lAl}An}{cc{}}00000{l{{B`{n}}}}{{ln}{{Ab{A`}}}}{ce{}{}}00000`{{}b}111111{c{{j{e}}}{}{}}00000000000{cBb{}}00000```````3333{{BdBd}Aj}{{hAl}An}0{{BdAl}An}0{Bdh}:{Bfh};{BhBd}99{h{{Ab{Bj}}}}{cBl{}}0999988","c":[],"p":[[5,"Model",4],[8,"Callback",0],[1,"unit"],[6,"MinionError",174],[6,"Result",206],[5,"SymbolTable",4],[8,"VarName",4],[6,"VarDomain",4],[6,"Option",207],[6,"Constraint",4],[6,"Var",4],[6,"Constant",4],[1,"bool"],[5,"Formatter",208],[8,"Result",208],[5,"Vec",209],[5,"TypeId",210],[6,"RuntimeError",174],[5,"Error",211],[1,"u32"],[10,"Error",212],[5,"String",213]],"b":[[186,"impl-Display-for-MinionError"],[187,"impl-Debug-for-MinionError"],[188,"impl-Display-for-RuntimeError"],[189,"impl-Debug-for-RuntimeError"],[190,"impl-From%3CRuntimeError%3E-for-MinionError"],[192,"impl-From%3CError%3E-for-MinionError"]]}],\
["uniplate",{"doc":"A port of Haskell’s Uniplate in Rust.","t":"CKGPNNNNNNNNNNNNNNNNNMNN","n":["uniplate","Uniplate","UniplateError","WrongNumberOfChildren","borrow","borrow_mut","children","descend","eq","fmt","fmt","fold","from","into","one_holed_context","rewrite","to_string","transform","try_from","try_into","type_id","uniplate","universe","with_children"],"q":[[0,"uniplate"],[1,"uniplate::uniplate"],[24,"alloc::vec"],[25,"core::result"],[26,"core::fmt"],[27,"core::fmt"],[28,"alloc::boxed"],[29,"core::option"],[30,"alloc::string"],[31,"core::any"]],"d":["","","","","","","Get the DIRECT children of a node.","Perform a transformation on all the immediate children, …","","","","Perform a fold-like computation on each value.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the nth one holed context.","Rewrite by applying a rule everywhere you can.","","Apply the given rule to all nodes bottom up.","","","","The <code>uniplate</code> function. Takes a node and produces a tuple …","Get all children of a node, including itself and all …","Reconstruct this node with the given children"],"i":[0,0,0,3,3,3,1,1,3,3,3,1,3,3,1,1,3,1,3,3,3,1,1,1],"f":"````{ce{}{}}0{b{{d{b}}}}{b{{h{bf}}}}{{ff}j}{{fl}n}0{bc{}}{cc{}}6{{bA`}{{Af{{Ad{Ab}}}}}}5{cAh{}}6{c{{h{e}}}{}{}}0{cAj{}}{b{{Al{{d{b}}{Ad{Ab}}}}}}:{{b{d{b}}}{{h{bf}}}}","c":[],"p":[[10,"Uniplate",1],[5,"Vec",24],[6,"UniplateError",1],[6,"Result",25],[1,"bool"],[5,"Formatter",26],[8,"Result",26],[1,"usize"],[10,"Fn",27],[5,"Box",28],[6,"Option",29],[5,"String",30],[5,"TypeId",31],[1,"tuple"]],"b":[[9,"impl-Display-for-UniplateError"],[10,"impl-Debug-for-UniplateError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
